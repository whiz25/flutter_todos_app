## CLASSES
- TodoState: This class manages the state of the app locally. It takes a list of Todo items a required parameter.
- TodoBloc: This class supplies the TodoState class with data from the TodoRepository class. It has a method that creates a new 
todo item. This method takes a String as a parameter.
- ITodoRepository: This is an abstract class with well defined methods that are implemented in the 
TodoRepository class.
- TodoRepository: This class holds the only source of data in the app. It overrides five methods from the ITodoRepository class.
- Todo: This is the model class of the app. This class has fields annotated as HiveFields. These fields are used by the hive_generator and build_runner to auto generate the TodoAdapter.

## METHODS
- addNewTodo: Adds a new todo item to the database. Takes a string as a parameter.
- deleteTodo: Deletes a todo item. Takes an id as a parameter.
- getAllTodos: Returns a list of todo items.
- updateTodoById: Updates a todo item based on the id of the todo item. The updated content is inserted at the specific index.
- checkIfBoxIsCreatedAndOpen: Checks if Box is created and open. This method is called before any operation
concerning the Box is performed.
- addTodoList: This method takes in a parameter of type TodoList. It creates a new TodoList object.
- deleteTodoList: Deletes a TodoList.
- getAllTodoLists: Returns a list of TodoList objects.
- getAllCompleteTodos: Returns completed todo items.
- getAllIncompleteTodos: Returns in complete todo items.

## STATE MANAGEMENT
- The state is managed locally using the Bloc pattern and globally using the async_redux package.
The async_redux package is built on top of the redux library.

## DATA
- Data is stored locally on the user's device using Hive database. HiveDatabase has one box for all todo lists and another box for todo items for each todo list.
A todo list's ID is used as the foreign key in the todo's item box. A todo item's ID is the same as the ID for the todo list it's added to.

## LOCALIZATION 
- A localization folder is added in the assets folder with json files for English and Danish languages. These are the two supported 
languages currently.

## DIRECTORIES
- Animations: Contains animation logic for the app. 
- Async_redux: Contains logic for managing state globally.
- Blocs: Contains bloc logic for local state management.
- Keys: Contains widget keys. These keys will be used through the app and when testing widgets.
- Model: Contains models. The Todo model and the auto generated TodoAdapter.
- Repository: Contains repository logic 
- Screens: This folder houses all pages in the app 
- Widgets: Houses re-usable widgets like the progress indicator
- Utils: Contains helper code. The AppTheme resides in this folder 

# FEATURES
  ## CREATE TODO LIST
    - A user can create a todo list with title.
    ### IMPLEMENTATION
    - The list will be created with the title given and an `id` field auto generated 
    as a `uuid` value.
    - The list will hold a list of todo items.
    - Every todo list is added to a single hive box.
    - When adding a todo item to the list, the id of the list is used as 
    the id for the todo item.

  ## DELETE TODO LIST 
    - A user can delete a todo list they created
    ### IMPLEMENTATION
    - A list can deleted taping on the list, navigating to the todo list screen,
    taping on the popup menu with three horizontal dots and confirming the delete action 
    after pressing the `delete_forever` icon.
    - This delete action will also delete all items in the given todo list.

  ## ADD DUE DATE 
    - A user should be able to add a due date to a todo item.
    ### IMPLEMENTATION
    - The dueDate is displayed in two different screens. The todo_list_screen and the todo_details_screen.
    - Initially the due date for any todo will be `null`.
    - The app state will take a dateTime field called `dueDate`.
    - An `update` method will be called from the ITodoRepository via the TodoBloc to set the due date of the todo item. 
    - The `dueDate` property can then be reset by calling the Todo.resetDueDate constructor.
